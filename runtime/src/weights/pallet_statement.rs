// This file is part of CORD â€“ https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_statement`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-3-249`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_statement
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_statement`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_statement::WeightInfo for WeightInfo<T> {
	/// Storage: Registry Authorizations (r:1 w:0)
	/// Proof: Registry Authorizations (max_values: None, max_size: Some(203), added: 2678, mode: MaxEncodedLen)
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// Storage: Statement StatementDigests (r:0 w:1)
	/// Proof: Statement StatementDigests (max_values: None, max_size: Some(98), added: 2573, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn register( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `76533`
		// Minimum execution time: 31_402_000 picoseconds.
		Weight::from_parts(32_732_810, 0)
			.saturating_add(Weight::from_parts(0, 76533))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// Storage: Statement StatementDigests (r:0 w:1)
	/// Proof: Statement StatementDigests (max_values: None, max_size: Some(98), added: 2573, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn update( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 23_689_000 picoseconds.
		Weight::from_parts(24_886_928, 0)
			.saturating_add(Weight::from_parts(0, 76533))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(38, 0))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn revoke( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_422_000 picoseconds.
		Weight::from_parts(22_786_031, 0)
			.saturating_add(Weight::from_parts(0, 76533))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn restore( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_049_000 picoseconds.
		Weight::from_parts(22_590_531, 0)
			.saturating_add(Weight::from_parts(0, 76533))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(20, 0))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn remove( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_583_000 picoseconds.
		Weight::from_parts(22_920_164, 0)
			.saturating_add(Weight::from_parts(0, 76533))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Statement Statements (r:1 w:0)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// Storage: Statement StatementDigests (r:0 w:1)
	/// Proof: Statement StatementDigests (max_values: None, max_size: Some(98), added: 2573, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn register_batch(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_831_000 picoseconds.
		Weight::from_parts(22_749_416, 76533)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(32, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	
	/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn add_presentation( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_777_000 picoseconds.
		Weight::from_parts(23_046_073, 76533)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
		/// Storage: Statement Statements (r:1 w:1)
	/// Proof: Statement Statements (max_values: None, max_size: Some(232), added: 2707, mode: MaxEncodedLen)
	/// Storage: Statement Commits (r:1 w:1)
	/// Proof: Statement Commits (max_values: None, max_size: Some(73068), added: 75543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn remove_presentation( ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `76533`
		// Minimum execution time: 21_777_000 picoseconds.
		Weight::from_parts(23_046_073, 76533)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
