// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `smohan-dev-host`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_731_000 picoseconds.
		Weight::from_parts(27_757_847, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_590_000 picoseconds.
		Weight::from_parts(15_584_247, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 2_209
			.saturating_add(Weight::from_parts(70_244, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 23_250_000 picoseconds.
		Weight::from_parts(24_272_786, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 5_469
			.saturating_add(Weight::from_parts(798_684, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_443_000 picoseconds.
		Weight::from_parts(18_282_948, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 2_076
			.saturating_add(Weight::from_parts(131_315, 0).saturating_mul(r.into()))
			// Standard Error: 4_880
			.saturating_add(Weight::from_parts(499_153, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 25_795_000 picoseconds.
		Weight::from_parts(26_166_300, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 2_275
			.saturating_add(Weight::from_parts(43_150, 0).saturating_mul(r.into()))
			// Standard Error: 5_349
			.saturating_add(Weight::from_parts(688_598, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 21_777_000 picoseconds.
		Weight::from_parts(22_896_625, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 1_775
			.saturating_add(Weight::from_parts(9_059, 0).saturating_mul(r.into()))
			// Standard Error: 4_174
			.saturating_add(Weight::from_parts(708_916, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_165_000 picoseconds.
		Weight::from_parts(10_881_224, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 1_453
			.saturating_add(Weight::from_parts(67_387, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_333_000 picoseconds.
		Weight::from_parts(10_768_679, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 1_097
			.saturating_add(Weight::from_parts(57_946, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 28_705_000 picoseconds.
		Weight::from_parts(28_390_583, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 2_318
			.saturating_add(Weight::from_parts(41_758, 0).saturating_mul(r.into()))
			// Standard Error: 5_203
			.saturating_add(Weight::from_parts(1_119_918, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_749_000 picoseconds.
		Weight::from_parts(17_992_455, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 2_217
			.saturating_add(Weight::from_parts(154_580, 0).saturating_mul(r.into()))
			// Standard Error: 5_213
			.saturating_add(Weight::from_parts(526_646, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
