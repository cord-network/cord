// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `smohan-dev-host`, CPU: `AMD EPYC 7B12`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-GPL3
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_410_000 picoseconds.
		Weight::from_parts(9_831_943, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 906
			.saturating_add(Weight::from_parts(48_118, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_290_000 picoseconds.
		Weight::from_parts(9_961_246, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 824
			.saturating_add(Weight::from_parts(41_047, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 14_680_000 picoseconds.
		Weight::from_parts(15_552_588, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 3_006
			.saturating_add(Weight::from_parts(554_672, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 12_970_000 picoseconds.
		Weight::from_parts(11_785_708, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 1_405
			.saturating_add(Weight::from_parts(83_136, 0).saturating_mul(r.into()))
			// Standard Error: 3_303
			.saturating_add(Weight::from_parts(328_025, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 16_371_000 picoseconds.
		Weight::from_parts(16_391_726, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 1_116
			.saturating_add(Weight::from_parts(28_240, 0).saturating_mul(r.into()))
			// Standard Error: 2_624
			.saturating_add(Weight::from_parts(500_140, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 13_890_000 picoseconds.
		Weight::from_parts(14_272_506, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 878
			.saturating_add(Weight::from_parts(10_394, 0).saturating_mul(r.into()))
			// Standard Error: 2_063
			.saturating_add(Weight::from_parts(501_460, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 7_060_000 picoseconds.
		Weight::from_parts(7_346_501, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 676
			.saturating_add(Weight::from_parts(43_234, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 6_989_000 picoseconds.
		Weight::from_parts(7_255_816, 0)
			.saturating_add(Weight::from_parts(0, 2511))
			// Standard Error: 616
			.saturating_add(Weight::from_parts(41_299, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 17_929_000 picoseconds.
		Weight::from_parts(18_016_536, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 1_775
			.saturating_add(Weight::from_parts(35_272, 0).saturating_mul(r.into()))
			// Standard Error: 3_984
			.saturating_add(Weight::from_parts(783_711, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 12_860_000 picoseconds.
		Weight::from_parts(11_619_071, 0)
			.saturating_add(Weight::from_parts(0, 5148))
			// Standard Error: 1_225
			.saturating_add(Weight::from_parts(82_082, 0).saturating_mul(r.into()))
			// Standard Error: 2_879
			.saturating_add(Weight::from_parts(337_231, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
