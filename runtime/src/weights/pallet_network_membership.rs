// This file is part of CORD â€“ https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_extrinsic_authorship`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-3-249`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cord
// benchmark
// pallet
// --chain=dev
// --steps=3
// --repeat=2
// --pallet=pallet-network-membership
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/network-membership/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for pallet_network_membership.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_network_membership::WeightInfo for WeightInfo<T> {
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn nominate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `35487`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 35487)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: NetworkMembership MembershipsRenewsOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsRenewsOn (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn renew() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `3513`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn revoke() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `326`
		//  Estimated: `35487`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 35487)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

}
