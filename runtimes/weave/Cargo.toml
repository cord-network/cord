[package]
name = 'cord-weave-runtime'
description = "Weave runtime implementation."
version.workspace = true
authors.workspace = true
build = 'build.rs'
edition.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
publish = false

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { features = [
	"derive",
	"max-encoded-len",
], workspace = true } # third-party dependencies
scale-info = { features = ["derive", "serde"], workspace = true }
static_assertions = { workspace = true, default-features = true }
log = { workspace = true }
serde = { workspace = true }
serde_json = { features = ["alloc", "arbitrary_precision"], workspace = true }
primitive-types = { features = [
	"codec",
	"num-traits",
	"scale-info",
], workspace = true }
# Local
cord-primitives = { workspace = true }
identifier = { workspace = true }
cord-weave-runtime-constants = { workspace = true }
cord-runtime-common = { workspace = true }

# Substrate
sp-api = { workspace = true }
sp-application-crypto = { workspace = true }
sp-arithmetic = { workspace = true }
sp-authority-discovery = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-consensus-beefy = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-consensus-slots = { workspace = true }
sp-core = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-io = { workspace = true }
sp-mmr-primitives = { workspace = true }
sp-npos-elections = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-staking = { workspace = true }
sp-state-machine = { workspace = true }
sp-statement-store = { workspace = true }
sp-std = { workspace = true }
sp-storage = { workspace = true }
sp-timestamp = { workspace = true }
sp-tracing = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-transaction-storage-proof = { workspace = true }
sp-trie = { workspace = true }
sp-version = { workspace = true }
pallet-assets = { workspace = true }
pallet-asset-conversion = { workspace = true }
pallet-asset-conversion-ops = { workspace = true }
# pallet-asset-conversion-tx-payment = { workspace = true }
pallet-asset-rate = { workspace = true }
pallet-asset-tx-payment = { workspace = true }
pallet-assets-freezer = { workspace = true }
pallet-atomic-swap = { workspace = true }
pallet-authority-discovery = { workspace = true }
pallet-authorship = { workspace = true }
pallet-babe = { workspace = true }
pallet-bags-list = { workspace = true }
pallet-balances = { workspace = true }
pallet-beefy = { workspace = true }
pallet-beefy-mmr = { workspace = true }
pallet-collective = { workspace = true }
pallet-contracts = { workspace = true }
pallet-contracts-proc-macro = { workspace = true }
pallet-contracts-uapi = { workspace = true }
pallet-election-provider-multi-phase = { workspace = true }
pallet-election-provider-support-benchmarking = { workspace = true, optional = true }
pallet-grandpa = { workspace = true }
pallet-identity = { workspace = true }
pallet-im-online = { workspace = true }
pallet-indices = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-membership = { workspace = true }
pallet-message-queue = { workspace = true }
pallet-migrations = { workspace = true }
pallet-mmr = { workspace = true }
pallet-multisig = { workspace = true }
pallet-nfts = { workspace = true }
pallet-nfts-runtime-api = { workspace = true }
pallet-nft-fractionalization = { workspace = true }
pallet-nomination-pools = { workspace = true }
pallet-nomination-pools-benchmarking = { workspace = true, optional = true }
pallet-nomination-pools-runtime-api = { workspace = true }
pallet-offences = { workspace = true }
pallet-offences-benchmarking = { workspace = true, optional = true }
pallet-paged-list = { workspace = true }
pallet-preimage = { workspace = true }
pallet-remark = { workspace = true }
pallet-root-offences = { workspace = true }
pallet-root-testing = { workspace = true }
pallet-sudo = { workspace = true }
pallet-safe-mode = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-session = { workspace = true }
pallet-session-benchmarking = { workspace = true, optional = true }
pallet-statement = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-staking-runtime-api = { workspace = true }
pallet-state-trie-migration = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-tx-pause = { workspace = true }
pallet-utility = { workspace = true }

frame-benchmarking-pallet-pov = { workspace = true }
frame-benchmarking = { workspace = true }
frame-executive = { workspace = true }
frame-election-provider-support = { workspace = true }
frame-metadata-hash-extension = { workspace = true }
frame-support = { features = ["tuples-96"], workspace = true }
frame-support-procedural = { workspace = true }
frame-support-procedural-tools-derive = { workspace = true }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-system-rpc-runtime-api = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }

[dev-dependencies]
tiny-keccak = { features = ["keccak"], workspace = true }
sp-keyring = { default-features = true, workspace = true }
remote-externalities = { default-features = true, workspace = true }
sp-trie = { default-features = true, workspace = true }
separator = { workspace = true }
serde_json = { workspace = true, default-features = true }
sp-tracing = { workspace = true, default-features = false }
tokio = { features = ["macros"], workspace = true, default-features = true }

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true, default-features = true }

[features]
default = ['std']
no_std = []
std = [
	"codec/std",
	"cord-primitives/std",
	"cord-runtime-common/std",
	"cord-weave-runtime-constants/std",
	"frame-benchmarking-pallet-pov/std",
	"frame-benchmarking/std",
	"frame-election-provider-support/std",
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support-procedural/std",
	"frame-support/std",
	"frame-system-benchmarking/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime/std",
	"identifier/std",
	"log/std",
	"pallet-assets/std",
	"pallet-asset-conversion/std",
	"pallet-asset-conversion-ops/std",
	# "pallet-asset-conversion-tx-payment/std",
	"pallet-asset-rate/std",
	"pallet-asset-tx-payment/std",
	"pallet-assets-freezer/std",
	"pallet-atomic-swap/std",
	"pallet-authority-discovery/std",
	"pallet-authorship/std",
	"pallet-babe/std",
	"pallet-bags-list/std",
	"pallet-balances/std",
	"pallet-beefy/std",
	"pallet-beefy-mmr/std",
	"pallet-collective/std",
	"pallet-contracts/std",
	"pallet-election-provider-multi-phase/std",
	"pallet-election-provider-support-benchmarking?/std",
	"pallet-grandpa/std",
	"pallet-identity/std",
	"pallet-im-online/std",
	"pallet-indices/std",
	"pallet-insecure-randomness-collective-flip/std",
	"pallet-membership/std",
	"pallet-message-queue/std",
	"pallet-migrations/std",
	"pallet-mmr/std",
	"pallet-multisig/std",
	"pallet-nfts/std",
	"pallet-nfts-runtime-api/std",
	"pallet-nft-fractionalization/std",
	"pallet-nomination-pools-benchmarking?/std",
	"pallet-nomination-pools-runtime-api/std",
	"pallet-nomination-pools/std",
	"pallet-offences-benchmarking?/std",
	"pallet-offences/std",
	"pallet-paged-list/std",
	"pallet-preimage/std",
	"pallet-remark/std",
	"pallet-root-offences/std",
	"pallet-root-testing/std",
	"pallet-sudo/std",
	"pallet-safe-mode/std",
	"pallet-scheduler/std",
	"pallet-session/std",
	"pallet-session-benchmarking?/std",
	"pallet-staking-runtime-api/std",
	# "pallet-staking-reward-curve/std",
	"pallet-staking/std",
	"pallet-state-trie-migration/std",
	"pallet-statement/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-treasury/std",
	"pallet-tx-pause/std",
	"pallet-utility/std",
	"primitive-types/std",
	"scale-info/std",
	"serde/std",
	"serde_json/std",
	"sp-api/std",
	"sp-application-crypto/std",
	"sp-arithmetic/std",
	"sp-authority-discovery/std",
	"sp-block-builder/std",
	"sp-consensus-babe/std",
	"sp-consensus-beefy/std",
	"sp-consensus-grandpa/std",
	"sp-consensus-slots/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-io/std",
	"sp-mmr-primitives/std",
	"sp-npos-elections/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-state-machine/std",
	"sp-statement-store/std",
	"sp-std/std",
	"sp-storage/std",
	"sp-timestamp/std",
	"sp-tracing/std",
	"sp-transaction-pool/std",
	"sp-transaction-storage-proof/std",
	"sp-trie/std",
	"sp-version/std",
	"substrate-wasm-builder",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-election-provider-support/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-asset-conversion-ops/runtime-benchmarks",
	"pallet-asset-conversion/runtime-benchmarks",
	"pallet-asset-rate/runtime-benchmarks",
	"pallet-asset-tx-payment/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-collective/runtime-benchmarks",
	"pallet-contracts/runtime-benchmarks",
	"pallet-election-provider-multi-phase/runtime-benchmarks",
	"pallet-election-provider-support-benchmarking/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-identity/runtime-benchmarks",
	"pallet-im-online/runtime-benchmarks",
	"pallet-indices/runtime-benchmarks",
	"pallet-membership/runtime-benchmarks",
	"pallet-message-queue/runtime-benchmarks",
	"pallet-migrations/runtime-benchmarks",
	"pallet-mmr/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-nft-fractionalization/runtime-benchmarks",
	"pallet-nfts/runtime-benchmarks",
	"pallet-nomination-pools-benchmarking/runtime-benchmarks",
	"pallet-nomination-pools/runtime-benchmarks",
	"pallet-offences-benchmarking/runtime-benchmarks",
	"pallet-offences/runtime-benchmarks",
	"pallet-preimage/runtime-benchmarks",
	"pallet-remark/runtime-benchmarks",
	"pallet-safe-mode/runtime-benchmarks",
	"pallet-scheduler/runtime-benchmarks",
	"pallet-session-benchmarking/runtime-benchmarks",
	"pallet-staking/runtime-benchmarks",
	"pallet-state-trie-migration/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-treasury/runtime-benchmarks",
	"pallet-tx-pause/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"sp-staking/runtime-benchmarks",
]

try-runtime = [
	"frame-executive/try-runtime",
	"frame-election-provider-support/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"identifier/try-runtime",
	"pallet-assets/try-runtime",
	"pallet-asset-conversion-ops/try-runtime",
	# "pallet-asset-conversion-tx-payment/try-runtime",
	"pallet-asset-conversion/try-runtime",
	"pallet-asset-rate/try-runtime",
	"pallet-asset-tx-payment/try-runtime",
	"pallet-authority-discovery/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-bags-list/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-beefy-mmr/try-runtime",
	"pallet-beefy/try-runtime",
	"pallet-collective/try-runtime",
	"pallet-contracts/try-runtime",
	"pallet-election-provider-multi-phase/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-identity/try-runtime",
	"pallet-im-online/try-runtime",
	"pallet-indices/try-runtime",
	"pallet-insecure-randomness-collective-flip/try-runtime",
	"pallet-membership/try-runtime",
	"pallet-message-queue/try-runtime",
	"pallet-migrations/try-runtime",
	"pallet-mmr/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-nft-fractionalization/try-runtime",
	"pallet-nfts/try-runtime",
	"pallet-nomination-pools/try-runtime",
	"pallet-offences/try-runtime",
	"pallet-preimage/try-runtime",
	"pallet-remark/try-runtime",
	"pallet-root-testing/try-runtime",
	"pallet-safe-mode/try-runtime",
	"pallet-scheduler/try-runtime",
	"pallet-session/try-runtime",
	"pallet-staking/try-runtime",
	# "pallet-session-benchmarking/try-runtime",
	"pallet-state-trie-migration/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-treasury/try-runtime",
	"pallet-tx-pause/try-runtime",
	"pallet-utility/try-runtime",
	"sp-runtime/try-runtime",
]

# Set timing constants (e.g. session period) to faster versions to speed up testing.
fast-runtime = []

# A feature that should be enabled when the runtime should be build for on-chain
# deployment. This will disable stuff that shouldn't be part of the on-chain wasm
# to make it smaller like logging for example.
on-chain-release-build = ["metadata-hash", "sp-api/disable-logging"]

metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# force-debug = ["sp-debug-derive/force-debug"]
