name: release

on:
  push:
    branches: [develop]

jobs:
  release-docker-image:
    runs-on: ubuntu-latest

    env:
      IMAGE_REPOSITORY: ${{ github.event.repository.name }}
      IMAGE_TAG: ${{ github.sha }}
      DOCKER_SERVER: docker.io
      DOCKER_USER: dhiway

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Authenticate with DockerHub
        run: |
          # Authenticate with Dockerhub using a Docker password secret
          docker login \
            ${{ env.DOCKER_SERVER }} \
            -u ${{ env.DOCKER_USER }} \
            -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build and push Docker Image
        run: |
          # Get the branch name
          DOCKER_BRANCH=${{ github.ref }}
          DOCKER_BRANCH=${DOCKER_BRANCH/refs\/heads\//}

          # Build the Docker image
          docker build \
            --no-cache \
            --file Dockerfile \
            --tag ${{ env.IMAGE_REPOSITORY }}:${DOCKER_BRANCH} \
            .

          # Tag the Docker image with the repository name and the commit hash
          docker tag \
            ${{ env.IMAGE_REPOSITORY }}:${DOCKER_BRANCH} \
            ${{ env.DOCKER_SERVER }}/${{ env.DOCKER_USER }}/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            && docker tag \
            ${{ env.IMAGE_REPOSITORY }}:${DOCKER_BRANCH} \
            ${{ env.DOCKER_SERVER }}/${{ env.DOCKER_USER }}/${{ env.IMAGE_REPOSITORY }}:${DOCKER_BRANCH}

          # Push the Docker image to the registry
          docker push ${{ env.DOCKER_SERVER }}/${{ env.DOCKER_USER }}/${{ env.IMAGE_REPOSITORY }}:${DOCKER_BRANCH}

  x86_64-binary:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
    
      - name: Install dependencies
        run: sudo apt-get update -y && sudo apt-get install -y protobuf-compiler libssl-dev

      - name: Setup Cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
    
      - name: Build binary (x86_64)
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Rename Binary
        run: mv target/release/cord cord-${GITHUB_REF#refs/heads/}-$(uname -m)-ubuntu-22.04
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload binary as Rlease Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cord-${GITHUB_REF#refs/heads/}-$(uname -m)-ubuntu-22.04
          asset_name: cord-${GITHUB_REF#refs/heads/}-$(uname -m)-ubuntu-22.04
          asset_content_type: application/octet-stream

      - name: Get Download URL
        id: get_download_url
        run: |
          echo "::set-output name=download_url::$(curl -s -X GET -H 'Accept: application/vnd.github.v3+json' -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.assets[] | select(.name == "cord-${GITHUB_REF#refs/heads/}-$(uname -m)-ubuntu-22.04") | .browser_download_url')"

      - name: Print Download URL
        run: |
          echo "Download URL: ${{ steps.get_download_url.outputs.download_url }}"
