name: CI

on:
  pull_request:
    paths-ignore:
      - "**.md"
      - "doc/**"
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libssl-dev

      - name: Cache Cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust nightly
        run: rustup toolchain install nightly

      - name: Show active toolchain
        run: rustup show active-toolchain

      - name: Add nightly rustfmt and clippy
        run: |
          rustup component add rustfmt
          rustup component add clippy

  rustfmt:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
      
      - name: Run rustfmt
        run: |
          cargo +nightly fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    needs: rustfmt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
      
      - name: Run cargo clippy
        run: |
          echo "Running clippy for the entire workspace"
          cargo clippy --all --no-deps --features "runtime-benchmarks" -- -D warnings

  test:
    runs-on: ubuntu-latest
    needs: rustfmt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Cache Cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run tests with runtime-benchmarks
        run: |
          echo "Running tests for all packages"
          cargo test --release --all --features "runtime-benchmarks" --no-fail-fast
