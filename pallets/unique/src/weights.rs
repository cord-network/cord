// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_unique
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `macbook.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_unique
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/unique/src/weights.rs
// --header=./HEADER-GPL3
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_unique.
pub trait WeightInfo {
	fn create(l: u32, ) -> Weight;
	fn revoke(l: u32, ) -> Weight;
	fn update(l: u32, ) -> Weight;
	fn remove(l: u32, ) -> Weight;
}

/// Weights for pallet_unique using the CORD node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Unique UniqueDigestEntries (r:1 w:1)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// Storage: Unique UniqueIdentifiers (r:0 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn create(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `15406533`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_303_847, 15406533)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(5_934, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Unique UniqueDigestEntries (r:1 w:0)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn revoke(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315 + l * (2 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_487_925, 15406533)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(10_823, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// Storage: Unique UniqueDigestEntries (r:0 w:1)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn update(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (1 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_673_663, 15406533)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(3_527, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn remove(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (1 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_233_959, 15406533)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(858, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Unique UniqueDigestEntries (r:1 w:1)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// Storage: Unique UniqueIdentifiers (r:0 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn create(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `15406533`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_303_847, 15406533)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(5_934, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Unique UniqueDigestEntries (r:1 w:0)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn revoke(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315 + l * (2 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_487_925, 15406533)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(10_823, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// Storage: Unique UniqueDigestEntries (r:0 w:1)
	/// Proof: Unique UniqueDigestEntries (max_values: None, max_size: Some(15428), added: 17903, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn update(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (1 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_673_663, 15406533)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(3_527, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Unique UniqueIdentifiers (r:1 w:1)
	/// Proof: Unique UniqueIdentifiers (max_values: None, max_size: Some(15513), added: 17988, mode: MaxEncodedLen)
	/// Storage: Unique Commits (r:1 w:1)
	/// Proof: Unique Commits (max_values: None, max_size: Some(15403068), added: 15405543, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 5120]`.
	fn remove(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + l * (1 ±0)`
		//  Estimated: `15406533`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_233_959, 15406533)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(858, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
