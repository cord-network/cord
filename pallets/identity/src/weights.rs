// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `smohan-dev-host`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/identity/src/weights.rs
// --header=./HEADER-GPL3
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_identity`.
pub trait WeightInfo {
	fn add_registrar(r: u32, ) -> Weight;
	fn remove_registrar(r: u32, ) -> Weight;
	fn set_identity(r: u32, ) -> Weight;
	fn clear_identity(r: u32, x: u32, ) -> Weight;
	fn request_judgement(r: u32, x: u32, ) -> Weight;
	fn cancel_request(r: u32, x: u32, ) -> Weight;
	fn set_account_id(r: u32, ) -> Weight;
	fn set_fields(r: u32, ) -> Weight;
	fn provide_judgement(r: u32, x: u32, ) -> Weight;
	fn kill_identity(r: u32, x: u32, ) -> Weight;
}

/// Weights for `pallet_identity` using the CORD node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_578_000 picoseconds.
		Weight::from_parts(15_142_977, 2511)
			// Standard Error: 1_155
			.saturating_add(Weight::from_parts(67_689, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_621_000 picoseconds.
		Weight::from_parts(15_424_571, 2511)
			// Standard Error: 1_553
			.saturating_add(Weight::from_parts(74_650, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 23_156_000 picoseconds.
		Weight::from_parts(24_277_032, 5148)
			// Standard Error: 4_190
			.saturating_add(Weight::from_parts(820_448, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_666_000 picoseconds.
		Weight::from_parts(18_596_030, 5148)
			// Standard Error: 3_144
			.saturating_add(Weight::from_parts(138_930, 0).saturating_mul(r.into()))
			// Standard Error: 7_390
			.saturating_add(Weight::from_parts(484_945, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 25_899_000 picoseconds.
		Weight::from_parts(25_919_074, 5148)
			// Standard Error: 1_965
			.saturating_add(Weight::from_parts(38_596, 0).saturating_mul(r.into()))
			// Standard Error: 4_619
			.saturating_add(Weight::from_parts(724_350, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 22_099_000 picoseconds.
		Weight::from_parts(22_207_866, 5148)
			// Standard Error: 1_370
			.saturating_add(Weight::from_parts(31_278, 0).saturating_mul(r.into()))
			// Standard Error: 3_222
			.saturating_add(Weight::from_parts(748_379, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_502_000 picoseconds.
		Weight::from_parts(11_079_052, 2511)
			// Standard Error: 1_414
			.saturating_add(Weight::from_parts(61_023, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_244_000 picoseconds.
		Weight::from_parts(10_680_888, 2511)
			// Standard Error: 1_124
			.saturating_add(Weight::from_parts(62_604, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 28_412_000 picoseconds.
		Weight::from_parts(28_881_104, 5148)
			// Standard Error: 2_066
			.saturating_add(Weight::from_parts(36_653, 0).saturating_mul(r.into()))
			// Standard Error: 4_638
			.saturating_add(Weight::from_parts(1_084_390, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_662_000 picoseconds.
		Weight::from_parts(18_191_422, 5148)
			// Standard Error: 2_727
			.saturating_add(Weight::from_parts(153_887, 0).saturating_mul(r.into()))
			// Standard Error: 6_411
			.saturating_add(Weight::from_parts(518_970, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_578_000 picoseconds.
		Weight::from_parts(15_142_977, 2511)
			// Standard Error: 1_155
			.saturating_add(Weight::from_parts(67_689, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 14_621_000 picoseconds.
		Weight::from_parts(15_424_571, 2511)
			// Standard Error: 1_553
			.saturating_add(Weight::from_parts(74_650, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 23_156_000 picoseconds.
		Weight::from_parts(24_277_032, 5148)
			// Standard Error: 4_190
			.saturating_add(Weight::from_parts(820_448, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_666_000 picoseconds.
		Weight::from_parts(18_596_030, 5148)
			// Standard Error: 3_144
			.saturating_add(Weight::from_parts(138_930, 0).saturating_mul(r.into()))
			// Standard Error: 7_390
			.saturating_add(Weight::from_parts(484_945, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 25_899_000 picoseconds.
		Weight::from_parts(25_919_074, 5148)
			// Standard Error: 1_965
			.saturating_add(Weight::from_parts(38_596, 0).saturating_mul(r.into()))
			// Standard Error: 4_619
			.saturating_add(Weight::from_parts(724_350, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 22_099_000 picoseconds.
		Weight::from_parts(22_207_866, 5148)
			// Standard Error: 1_370
			.saturating_add(Weight::from_parts(31_278, 0).saturating_mul(r.into()))
			// Standard Error: 3_222
			.saturating_add(Weight::from_parts(748_379, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_502_000 picoseconds.
		Weight::from_parts(11_079_052, 2511)
			// Standard Error: 1_414
			.saturating_add(Weight::from_parts(61_023, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 10_244_000 picoseconds.
		Weight::from_parts(10_680_888, 2511)
			// Standard Error: 1_124
			.saturating_add(Weight::from_parts(62_604, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 28_412_000 picoseconds.
		Weight::from_parts(28_881_104, 5148)
			// Standard Error: 2_066
			.saturating_add(Weight::from_parts(36_653, 0).saturating_mul(r.into()))
			// Standard Error: 4_638
			.saturating_add(Weight::from_parts(1_084_390, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 20_662_000 picoseconds.
		Weight::from_parts(18_191_422, 5148)
			// Standard Error: 2_727
			.saturating_add(Weight::from_parts(153_887, 0).saturating_mul(r.into()))
			// Standard Error: 6_411
			.saturating_add(Weight::from_parts(518_970, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
