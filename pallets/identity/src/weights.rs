// This file is part of CORD – https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `smohan-dev-host`, CPU: `AMD EPYC 7B12`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/identity/src/weights.rs
// --header=./HEADER-GPL3
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_identity`.
pub trait WeightInfo {
	fn add_registrar(r: u32, ) -> Weight;
	fn remove_registrar(r: u32, ) -> Weight;
	fn set_identity(r: u32, ) -> Weight;
	fn clear_identity(r: u32, x: u32, ) -> Weight;
	fn request_judgement(r: u32, x: u32, ) -> Weight;
	fn cancel_request(r: u32, x: u32, ) -> Weight;
	fn set_account_id(r: u32, ) -> Weight;
	fn set_fields(r: u32, ) -> Weight;
	fn provide_judgement(r: u32, x: u32, ) -> Weight;
	fn kill_identity(r: u32, x: u32, ) -> Weight;
}

/// Weights for `pallet_identity` using the CORD node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_330_000 picoseconds.
		Weight::from_parts(9_843_603, 2511)
			// Standard Error: 941
			.saturating_add(Weight::from_parts(47_402, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_280_000 picoseconds.
		Weight::from_parts(9_787_994, 2511)
			// Standard Error: 1_000
			.saturating_add(Weight::from_parts(54_640, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 14_620_000 picoseconds.
		Weight::from_parts(15_465_969, 5148)
			// Standard Error: 3_452
			.saturating_add(Weight::from_parts(582_727, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 12_960_000 picoseconds.
		Weight::from_parts(11_772_003, 5148)
			// Standard Error: 1_261
			.saturating_add(Weight::from_parts(81_200, 0).saturating_mul(r.into()))
			// Standard Error: 2_965
			.saturating_add(Weight::from_parts(334_384, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 16_350_000 picoseconds.
		Weight::from_parts(16_402_300, 5148)
			// Standard Error: 1_205
			.saturating_add(Weight::from_parts(28_575, 0).saturating_mul(r.into()))
			// Standard Error: 2_833
			.saturating_add(Weight::from_parts(480_505, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 13_930_000 picoseconds.
		Weight::from_parts(14_564_159, 5148)
			// Standard Error: 994
			.saturating_add(Weight::from_parts(3_949, 0).saturating_mul(r.into()))
			// Standard Error: 2_336
			.saturating_add(Weight::from_parts(499_424, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 6_920_000 picoseconds.
		Weight::from_parts(7_257_607, 2511)
			// Standard Error: 706
			.saturating_add(Weight::from_parts(39_810, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 6_780_000 picoseconds.
		Weight::from_parts(7_156_874, 2511)
			// Standard Error: 825
			.saturating_add(Weight::from_parts(46_740, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 18_330_000 picoseconds.
		Weight::from_parts(18_599_242, 5148)
			// Standard Error: 3_185
			.saturating_add(Weight::from_parts(9_535, 0).saturating_mul(r.into()))
			// Standard Error: 7_149
			.saturating_add(Weight::from_parts(808_251, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 13_010_000 picoseconds.
		Weight::from_parts(11_847_557, 5148)
			// Standard Error: 1_421
			.saturating_add(Weight::from_parts(83_737, 0).saturating_mul(r.into()))
			// Standard Error: 3_342
			.saturating_add(Weight::from_parts(341_885, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn add_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_330_000 picoseconds.
		Weight::from_parts(9_843_603, 2511)
			// Standard Error: 941
			.saturating_add(Weight::from_parts(47_402, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn remove_registrar(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 9_280_000 picoseconds.
		Weight::from_parts(9_787_994, 2511)
			// Standard Error: 1_000
			.saturating_add(Weight::from_parts(54_640, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	fn set_identity(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306 + r * (33 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 14_620_000 picoseconds.
		Weight::from_parts(15_465_969, 5148)
			// Standard Error: 3_452
			.saturating_add(Weight::from_parts(582_727, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn clear_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 12_960_000 picoseconds.
		Weight::from_parts(11_772_003, 5148)
			// Standard Error: 1_261
			.saturating_add(Weight::from_parts(81_200, 0).saturating_mul(r.into()))
			// Standard Error: 2_965
			.saturating_add(Weight::from_parts(334_384, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 16_350_000 picoseconds.
		Weight::from_parts(16_402_300, 5148)
			// Standard Error: 1_205
			.saturating_add(Weight::from_parts(28_575, 0).saturating_mul(r.into()))
			// Standard Error: 2_833
			.saturating_add(Weight::from_parts(480_505, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 13_930_000 picoseconds.
		Weight::from_parts(14_564_159, 5148)
			// Standard Error: 994
			.saturating_add(Weight::from_parts(3_949, 0).saturating_mul(r.into()))
			// Standard Error: 2_336
			.saturating_add(Weight::from_parts(499_424, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_account_id(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 6_920_000 picoseconds.
		Weight::from_parts(7_257_607, 2511)
			// Standard Error: 706
			.saturating_add(Weight::from_parts(39_810, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:1)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	fn set_fields(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + r * (41 ±0)`
		//  Estimated: `2511`
		// Minimum execution time: 6_780_000 picoseconds.
		Weight::from_parts(7_156_874, 2511)
			// Standard Error: 825
			.saturating_add(Weight::from_parts(46_740, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::Registrars` (r:1 w:0)
	/// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `MaxEncodedLen`)
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 24]`.
	/// The range of component `x` is `[0, 10]`.
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304 + r * (41 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 18_330_000 picoseconds.
		Weight::from_parts(18_599_242, 5148)
			// Standard Error: 3_185
			.saturating_add(Weight::from_parts(9_535, 0).saturating_mul(r.into()))
			// Standard Error: 7_149
			.saturating_add(Weight::from_parts(808_251, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Identity::IdentityOf` (r:1 w:1)
	/// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(1683), added: 4158, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 25]`.
	/// The range of component `x` is `[0, 10]`.
	fn kill_identity(r: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240 + r * (33 ±0) + x * (66 ±0)`
		//  Estimated: `5148`
		// Minimum execution time: 13_010_000 picoseconds.
		Weight::from_parts(11_847_557, 5148)
			// Standard Error: 1_421
			.saturating_add(Weight::from_parts(83_737, 0).saturating_mul(r.into()))
			// Standard Error: 3_342
			.saturating_add(Weight::from_parts(341_885, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
