// This file is part of CORD â€“ https://cord.network

// Copyright (C) Dhiway Networks Pvt. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// CORD is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CORD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with CORD. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_score
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rohits-iMac`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/cord
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_score
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/score/src/weights.rs
// --header=./HEADER-GPL3
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_score.
pub trait WeightInfo {
	fn add_rating(l: u32, ) -> Weight;
}

/// Weights for pallet_score using the CORD node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Registry Authorizations (r:1 w:0)
	/// Proof: Registry Authorizations (max_values: None, max_size: Some(203), added: 2678, mode: MaxEncodedLen)
	/// Storage: Score JournalHashes (r:1 w:1)
	/// Proof: Score JournalHashes (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Score TidEntries (r:1 w:1)
	/// Proof: Score TidEntries (max_values: None, max_size: Some(131), added: 2606, mode: MaxEncodedLen)
	/// Storage: Score Scores (r:1 w:1)
	/// Proof: Score Scores (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Score Journal (r:0 w:1)
	/// Proof: Score Journal (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 15360]`.
	fn add_rating(_l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228`
		//  Estimated: `3668`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_102_843, 3668)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Registry Authorizations (r:1 w:0)
	/// Proof: Registry Authorizations (max_values: None, max_size: Some(203), added: 2678, mode: MaxEncodedLen)
	/// Storage: Score JournalHashes (r:1 w:1)
	/// Proof: Score JournalHashes (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Score TidEntries (r:1 w:1)
	/// Proof: Score TidEntries (max_values: None, max_size: Some(131), added: 2606, mode: MaxEncodedLen)
	/// Storage: Score Scores (r:1 w:1)
	/// Proof: Score Scores (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Score Journal (r:0 w:1)
	/// Proof: Score Journal (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 15360]`.
	fn add_rating(_l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228`
		//  Estimated: `3668`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_102_843, 3668)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
