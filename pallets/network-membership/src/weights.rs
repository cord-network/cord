
//! Autogenerated weights for pallet_network_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-16, STEPS: `3`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pi.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cord
// benchmark
// pallet
// --chain=dev
// --steps=3
// --repeat=2
// --pallet=pallet-network-membership
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/network-membership/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_network_membership.
pub trait WeightInfo {
	fn nominate() -> Weight;
	fn renew() -> Weight;
	fn revoke() -> Weight;
}

/// Weights for pallet_network_membership using the CORD node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn nominate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `35487`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 35487)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: NetworkMembership MembershipsRenewsOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsRenewsOn (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn renew() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `3513`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn revoke() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `326`
		//  Estimated: `35487`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 35487)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn nominate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `35487`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 35487)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: NetworkMembership MembershipsRenewsOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsRenewsOn (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn renew() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `3513`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: NetworkMembership Members (r:1 w:1)
	/// Proof: NetworkMembership Members (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: NetworkMembership CounterForMembers (r:1 w:1)
	/// Proof: NetworkMembership CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NetworkMembership MembershipsExpiresOn (r:1 w:1)
	/// Proof: NetworkMembership MembershipsExpiresOn (max_values: None, max_size: Some(32022), added: 34497, mode: MaxEncodedLen)
	fn revoke() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `326`
		//  Estimated: `35487`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 35487)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
